// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package posts

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMocksService creates a new instance of MocksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksService {
	mock := &MocksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MocksService is an autogenerated mock type for the Service type
type MocksService struct {
	mock.Mock
}

type MocksService_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksService) EXPECT() *MocksService_Expecter {
	return &MocksService_Expecter{mock: &_m.Mock}
}

// CreateBlogPost provides a mock function for the type MocksService
func (_mock *MocksService) CreateBlogPost(title string, content string) (int64, error) {
	ret := _mock.Called(title, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlogPost")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return returnFunc(title, content)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = returnFunc(title, content)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(title, content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocksService_CreateBlogPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlogPost'
type MocksService_CreateBlogPost_Call struct {
	*mock.Call
}

// CreateBlogPost is a helper method to define mock.On call
//   - title string
//   - content string
func (_e *MocksService_Expecter) CreateBlogPost(title interface{}, content interface{}) *MocksService_CreateBlogPost_Call {
	return &MocksService_CreateBlogPost_Call{Call: _e.mock.On("CreateBlogPost", title, content)}
}

func (_c *MocksService_CreateBlogPost_Call) Run(run func(title string, content string)) *MocksService_CreateBlogPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocksService_CreateBlogPost_Call) Return(n int64, err error) *MocksService_CreateBlogPost_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MocksService_CreateBlogPost_Call) RunAndReturn(run func(title string, content string) (int64, error)) *MocksService_CreateBlogPost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function for the type MocksService
func (_mock *MocksService) CreateComment(blogPostID string, text string) (int64, error) {
	ret := _mock.Called(blogPostID, text)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return returnFunc(blogPostID, text)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = returnFunc(blogPostID, text)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(blogPostID, text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocksService_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MocksService_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - blogPostID string
//   - text string
func (_e *MocksService_Expecter) CreateComment(blogPostID interface{}, text interface{}) *MocksService_CreateComment_Call {
	return &MocksService_CreateComment_Call{Call: _e.mock.On("CreateComment", blogPostID, text)}
}

func (_c *MocksService_CreateComment_Call) Run(run func(blogPostID string, text string)) *MocksService_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocksService_CreateComment_Call) Return(n int64, err error) *MocksService_CreateComment_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MocksService_CreateComment_Call) RunAndReturn(run func(blogPostID string, text string) (int64, error)) *MocksService_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBlogPosts provides a mock function for the type MocksService
func (_mock *MocksService) GetAllBlogPosts(page int, limit int) ([]BlogPost, error) {
	ret := _mock.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogPosts")
	}

	var r0 []BlogPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]BlogPost, error)); ok {
		return returnFunc(page, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []BlogPost); ok {
		r0 = returnFunc(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocksService_GetAllBlogPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBlogPosts'
type MocksService_GetAllBlogPosts_Call struct {
	*mock.Call
}

// GetAllBlogPosts is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *MocksService_Expecter) GetAllBlogPosts(page interface{}, limit interface{}) *MocksService_GetAllBlogPosts_Call {
	return &MocksService_GetAllBlogPosts_Call{Call: _e.mock.On("GetAllBlogPosts", page, limit)}
}

func (_c *MocksService_GetAllBlogPosts_Call) Run(run func(page int, limit int)) *MocksService_GetAllBlogPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocksService_GetAllBlogPosts_Call) Return(blogPosts []BlogPost, err error) *MocksService_GetAllBlogPosts_Call {
	_c.Call.Return(blogPosts, err)
	return _c
}

func (_c *MocksService_GetAllBlogPosts_Call) RunAndReturn(run func(page int, limit int) ([]BlogPost, error)) *MocksService_GetAllBlogPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlogPost provides a mock function for the type MocksService
func (_mock *MocksService) GetBlogPost(id string) (*BlogPost, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogPost")
	}

	var r0 *BlogPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*BlogPost, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *BlogPost); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocksService_GetBlogPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlogPost'
type MocksService_GetBlogPost_Call struct {
	*mock.Call
}

// GetBlogPost is a helper method to define mock.On call
//   - id string
func (_e *MocksService_Expecter) GetBlogPost(id interface{}) *MocksService_GetBlogPost_Call {
	return &MocksService_GetBlogPost_Call{Call: _e.mock.On("GetBlogPost", id)}
}

func (_c *MocksService_GetBlogPost_Call) Run(run func(id string)) *MocksService_GetBlogPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MocksService_GetBlogPost_Call) Return(blogPost *BlogPost, err error) *MocksService_GetBlogPost_Call {
	_c.Call.Return(blogPost, err)
	return _c
}

func (_c *MocksService_GetBlogPost_Call) RunAndReturn(run func(id string) (*BlogPost, error)) *MocksService_GetBlogPost_Call {
	_c.Call.Return(run)
	return _c
}
